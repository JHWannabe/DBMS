MongoDB
- NoSQL이기 때문에 관계형 데이터베이스의 테이블 개념이 없음
- 데이터가 모인 하나의 단위를 컬렉션이라고 부름
- 데이터를 정해놓은 컬럼의 형태로 컬렉션에 넣어야 한다는 제약이 없음
- MongoDB의 데이터베이스는 컬렉션의 집합
- 컬렉션은 여러개의 문서 객체를 가질 수 있음
	예) {"id":1, "userid":"apple", "userpw":"1111", "name":"김사과"}
	
	document -> collection -> database

document
- RDBMS의 record와 비슷한 개념(=row)
- 데이터 구조가 한개 이상의 key-value-pair로 이루어져 있음
- 동적인 스키마를 가지고 있음
- 같은 컬렉션 안에 있는 document끼리 서로 다른 스키마를 가지고 있을 수 있음
	{"id":1, "userid":"apple", "userpw":"1111", "name":"김사과"}
	{"name":"김사과","gender":"여자", "job":"학생"}

collection
- document 그룹
- collection 내부에 document들이 위치
- table과 비슷한 개념이지만 RDBMS와 달리 스키마를 별도로 가지지 않음

mongodb 다운로드
https://www.mongodb.com/

mongodb 환경설정

내pc 우측버튼 속성 -> 고급시스템 설정 -> 환경변수 -> path를 찾아 편집 -> 새로만들기 -> C:\Program Files\MongoDB\Server\4.4\bin

mongo 실행

MongoDB의 문법

데이터베이스 확인
show dbs;

데이터베이스 생성
use 데이터베이스명;
use dbms;
* 데이터베이스 없으면 생성, 있으면 선택
* 데이터베이스에 자료가 전혀 없을 경우 show dbs에서 나타나지 않음

컬렉션 생성
db.createCollection('컬렉션명');
db.createCollection('testCollection');

컬렉션 확인
show collections;

컬렉션 삭제
db.testCollection.drop();

연습용 컬렉션 만들기
db.createCollection("member");


document 추가
db.컬렉션명.insert(객체);
db.member.insert({'userid':'apple','userpw':'1111'});
db.member.insert({'userid':'banana','name':'반하나','gender':'여자'});


document 확인
db.컬렉션명.find();
db.member.find();

db.member.insert({'userid':'orange','userpw':'2222','name':'오렌지','gender':'남자'});
db.member.insert({'userid':'melon','userpw':'3333','name':'이메론','gender':'남자','point':500});
db.member.insert({'userid':'cherry','userpw':'4444','name':'채리','gender':'여자','point':700});
db.member.insert({'userid':'avocado','userpw':'5555','name':'안가도','gender':'남자','point':800});
db.member.insert({'userid':'berry','userpw':'6666','name':'배애리','gender':'여자','point':1000});
db.member.insert({'userid':'coconut','userpw':'7777','name':'고코넛','gender':'남자','point':300});
db.member.insert({'userid':'ryuzy','userpw':'8888','name':'류지','gender':'남자','point':400});

db.컬렉션명.find().pretty();
db.member.find().pretty();

db.컬렉션명.find(객체).pretty();
db.member.find({'userid':'apple'}).pretty();

*_id는 각 document의 유일한 키로 쓰이는 값

document의 비교연산
$eq : 주어진 값과 일치하는 값을 찾음
$gt : 주어진 값보다 큰 값을 찾음
$gte : 주어진 값보다 크거나 같은 값을 찾음
$lt : 주어진 값보다 작은 값을 찾음
$lte : 주어진 값보다 작거나 같은 값을 찾음
$ne : 주어진 값과 일치하지 않는 값을 찾음
$in : 주어진 배열안에 속하는 값을 찾음
$nin : 주어진 배열안에 속하지 않는 값을 찾음

문제.
포인트가 700이상인 멤버를 검색
db.member.find({'point':{$gte:700}}).pretty();

document의 논리연산
$and : 주어진 모든 조건이 true일 때 true인 결과를 찾음
$or : 주어진 조건 중 하나라도 true일 때 true인 결과를 찾음
$not : 주어진 조건이 false일 때 true, true일 때 false인 결과를 찾음

문제.
아이디가 'cherry'이고 비밀번호가 '4444'인 멤버를 검색
db.member.find({$and:[{'userid':'cherry'},{'userpw':'4444'}]}).pretty();

문제.
성별이 "여자"이고 포인트가 700이상인 멤버를 검색
db.member.find({$and:[{'gender':'여자'},{'point':{$gte:700}}]}).pretty();

document의 정렬
db.컬렉션명.find().sort(객체);
* 객체
- {key:value} -> key는 데이터의 field이름, value의 값은 1(오름차순), -1(내림차순)
- 여러 key를 입력할 수 있고, 먼저 입력한 key가 우선권을 가짐
db.member.find().sort({'_id':-1}).pretty();

document의 개수 제한
- limit() : 출력할 데이터 개수를 제한할 때 사용
- db.컬렉션명.find().limit(출력할 개수);
db.member.find().limit(3).pretty();

document 데이터 생략후 출력
skip() : 출력할 데이터의 시작부분을 설정할 경우 사용
db.컬렉션명.find().skip(생략할 개수);
db.member.find().skip(2).pretty();

document의 수정
1. 특정 field 업데이트
db.컬렉션명.update(객체, {$set:바뀔객체});
db.member.update({'userid':'avocado'},{$set:{'name':'안카도'}});

2. document replace
db.컬렉션명.update(변경할 객체, 바뀔 객체);
db.member.update({'_id':ObjectId("60e59a48f93f8f6e174a57c3")},{'userid':'coconut','userpw':'9999','name':'고고넛','gender':'남자'});

document의 삭제
db.컬렉션명.remove(객체);
db.member.remove({"_id" : ObjectId("60e59a93f93f8f6e174a57c8")});
